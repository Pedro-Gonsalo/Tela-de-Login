unit uDataModule;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MSSQL,
  FireDAC.Phys.MSSQLDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet;

type
  TDataModule1 = class(TDataModule)
    FDConnectionLogin: TFDConnection;
    FDQueryUsers: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDataModule1.DataModuleCreate(Sender: TObject);
begin
     FDConnectionLogin.Connected := true;
     FDQueryUsers.Active := true;
end;

procedure TDataModule1.DataModuleDestroy(Sender: TObject);
begin
     FDConnectionLogin.Connected := false;
     FDQueryUsers.Active := false;
end;

procedure EnsureDatabase(const AServer, APort, AUser, APassword: string);
var
  LConn   : TFDConnection;
  LExists : Integer;
begin
     LConn := TFDConnection.Create(nil);

     try
        // Conecta primeiro ao banco 'postgres' (default) para poder criar outros
        LConn.Params.Clear;
        LConn.Params.AddStrings([
          'DriverID=PG',
          'Server='     + AServer,
          'Port='       + APort,
          'Database=postgres',
          'User_Name='  + AUser,
          'Password='   + APassword
        ]);
        LConn.LoginPrompt := False;
        LConn.Connected   := True;

        // Verifica se já existe
        LExists := LConn.ExecSQLScalar(
          'SELECT 1 FROM pg_database WHERE datname = :db',
          [TARGET_DB]
        ).AsInteger;

        if LExists = 0 then
          LConn.ExecSQL('CREATE DATABASE "' + TARGET_DB + '"');
     finally
       LConn.Free;
     end;
end;

procedure EnsureUsersTable(const AServer, APort, AUser, APassword: string);
var
  LConn: TFDConnection;
begin
     LConn := TFDConnection.Create(nil);

     try
        // Agora conectamos diretamente ao banco alvo
        LConn.Params.Clear;
        LConn.Params.AddStrings([
          'DriverID=PG',
          'Server='     + AServer,
          'Port='       + APort,
          'Database='   + TARGET_DB,
          'User_Name='  + AUser,
          'Password='   + APassword
        ]);
        LConn.LoginPrompt := False;
        LConn.Connected   := True;

        LConn.ExecSQL(
          'CREATE TABLE IF NOT EXISTS users ('                   + sLineBreak +
          '    id         SERIAL PRIMARY KEY,'                   + sLineBreak +
          '    nome       VARCHAR(100) NOT NULL,'                + sLineBreak +
          '    sobrenome  VARCHAR(100) NOT NULL,'                + sLineBreak +
          '    email      VARCHAR(255) NOT NULL UNIQUE,'         + sLineBreak +
          '    senha      TEXT         NOT NULL,'                + sLineBreak +
          '    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP'   + sLineBreak +
          ');'
        );
     finally
        LConn.Free;
     end;
end;

end.
